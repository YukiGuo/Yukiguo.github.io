<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小郭的博客</title>
    <link>http://example.org/</link>
    <description>Recent content on 小郭的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 11 Dec 2019 22:17:44 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JSON</title>
      <link>http://example.org/posts/json/</link>
      <pubDate>Wed, 11 Dec 2019 22:17:44 +0800</pubDate>
      
      <guid>http://example.org/posts/json/</guid>
      <description> 全称JavaScript Object Notation,是一种标记语言 JSON的基本数据类型  number string 只支持双引号 boolean object array null  两个方法  JSON.parse() , 用来解析JSON字符串，转化成JavaScript对应的数据类型 JSON.stringfy() ,用来将 JavaScript 值（对象或者数组）转换为一个 JSON 字符串 因为 JS的数据类型多余JSON数据,所以不一定能成功,如果出错可以用try{}catch(error){}捕获错误  </description>
    </item>
    
    <item>
      <title>AJAX</title>
      <link>http://example.org/posts/ajax/</link>
      <pubDate>Wed, 11 Dec 2019 21:19:54 +0800</pubDate>
      
      <guid>http://example.org/posts/ajax/</guid>
      <description> AJAX 简介  全称 Async Javascript And XML AJAX是浏览器上的功能，浏览器在window上加了一个XMLHttpRequest9()的构造函数 用JS通过它来发出请求和接收响应  创建一个AJAX请求,并且请求css文件  创建一个XMLHttpRequest() const request = newXMLHttpRequest() 调用对象的open方法，request.open(&amp;ldquo;GET&amp;rdquo;,&amp;lsquo;url&amp;rsquo;) 监听对象的onload和onerror
 request.onload =(()=&amp;gt;{}) request.onerror =(()=&amp;gt;{})&amp;mdash;-不建议使用,没有非常好的匹配AJAx 利用 onreadystatechange 优化
request.onreadystatechange = () =&amp;gt; { if (request.readyState === 4 &amp;amp;&amp;amp; request.status === 200) { const dom = request.responseXML const text = dom.getElementsByTagName(&amp;#34;warning&amp;#34;)[0].textContent console.log(text.trim()) } }   发送请求 request.send()
 创建style,并设置内容的InnerHTML(request.response)
  readyState 返回一个 XMLHttpRequest 代理当前所处的状态  值 0 &amp;mdash;-UNSENT &amp;mdash;&amp;ndash; 代理被创建，但尚未调用 open() 方法 值 1 &amp;mdash;-OPEND &amp;mdash;&amp;ndash; 方法已经被调用 值 2 &amp;mdash;-HEADERS_RECEIVED &amp;mdash;- 方法已经被调用，并且头部和状态已经可获得。 值 3 &amp;mdash;-LOADING &amp;mdash;- 下载中,responseText 属性已经包含部分数据 值 4 &amp;mdash;-DONE &amp;mdash;- 下载操作已完成。  </description>
    </item>
    
    <item>
      <title>HTTP请求和响应</title>
      <link>http://example.org/posts/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</link>
      <pubDate>Wed, 11 Dec 2019 20:08:52 +0800</pubDate>
      
      <guid>http://example.org/posts/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</guid>
      <description>请求  请求行，请求动词/路径 版本号
 请求动词  共有GET/POST/PUT/PATCH/DELETE5中 GET用来获取内容，POST用来上传内容   请求头
 HOST 域名+端口号 Accept text/html(默认值) Content-Type:请求体的格式  请求体(格式由Content-Type指定)
 注意
 GET请求没有请求体 请求头和请求体中间有一个回车
 大小写不敏感，但是JS敏感  发出请求
 用 curl 发出请求 curl -v http://localhost:8888 设置请求动词 : curl -v -X POST http://localhost:8888 设置路径和查询参数 curl -v -X POST http://localhost:8888/xxx?wd=hi (不能加锚点,锚点不会发到服务器 ) 设置请求头  -H &amp;lsquo;Name: Value&amp;rsquo; 或者 &amp;ndash;header &amp;lsquo;Name: Value&amp;rsquo; curl -v -X POST -H &amp;lsquo;Accept:text/html&amp;rsquo;http://localhost:8888  设置请求体  -d &amp;lsquo;内容&amp;rsquo;或者 &amp;ndash;data&amp;rsquo;内容&amp;rsquo;   Node.</description>
    </item>
    
    <item>
      <title>项目总结之前端导航</title>
      <link>http://example.org/posts/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%AF%BC%E8%88%AA/</link>
      <pubDate>Tue, 10 Dec 2019 22:19:41 +0800</pubDate>
      
      <guid>http://example.org/posts/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%AF%BC%E8%88%AA/</guid>
      <description> 1.Html和Css样式  因为此页面需要兼容移动端，需要设置meta viewport
&amp;lt;meta id=&amp;#34;viewport&amp;#34; name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;#34;&amp;gt; 利用Flex实现平均布局
 icon-font 的应用,教程链接，常用Symbol引入法
 利用搜索框,进行百度搜索
&amp;lt;form class=&amp;#34;searchForm&amp;#34; method=&amp;#34;GET&amp;#34; action=&amp;#34;https://www.baidu.com/s&amp;#34; &amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;wd&amp;#34;&amp;gt; &amp;lt;button&amp;gt;搜索&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt;  2.JS功能实现  将导航的数据，例如网址，网站名，logo(即大写首字母),储存在哈希表中,添加网页时，push到哈希表中删除网页时，在哈希表删除 将哈希表中数据渲染到页面中，每次渲染前都需要删除，之前的所有内容，然后再重新渲染 按下删除按钮时，需要防止页面刷新，跳转  </description>
    </item>
    
    <item>
      <title>项目总结之皮卡丘</title>
      <link>http://example.org/posts/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B9%8B%E7%9A%AE%E5%8D%A1%E4%B8%98/</link>
      <pubDate>Tue, 10 Dec 2019 21:28:31 +0800</pubDate>
      
      <guid>http://example.org/posts/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B9%8B%E7%9A%AE%E5%8D%A1%E4%B8%98/</guid>
      <description> 1.Html和Css样式  矩形border-radius 的多种应用，制作扇形，弧形 动画@keyframe 的应用 transform之,translateX(),rotate()，transform-origin的应用  2. JS动态代码和样式呈现  利用 setInterval(),利用InnerHTML()将字符串string的内容一个个展示在页面上，此方法有一个bug，需要判断string 的长度再执行代码，否则清除计时器 将string的内容用css的内容替换，在用InnerText()将css的数据显示在页面的style标签,这样可使得页面和style标签同时作用，为了使代码自动向上，可以设置demo.scrollTop=99999,将此项封装为一个函数 添加按钮,暂停,播放,快速,慢速  设置一个及时器,并命名id,暂停clearInterval(id),播放时重新给id赋值,慢速和快速通过setInterval()的时间参数    3.代码优化  利用对象封装,JS 代码中仅有一个player对象和一个初始化init()方法 将用到的常量放入对象中，将四个按钮对应的值和点击对应的方法，用hashTable表示(值不能是player的方法，需要设置成字符串) css的字符串内容太多，可将css的内容作为字符串放入JS子文件，在再引入 paly(),stop(),fastPlay(),slowPlay(),bindEvents()封装成对象内的方法,bindEvents()是为了遍历hashTable里面的内容，为了防止遍历到共有属性，可以先判断对象的hasOwnProperty() 一个函数直接调用一个函数，可以简化 例如:
 setInterval(()=&amp;gt;{run()},runTime)可以简化为setInterval(run,runTime) demo.onclick=()=&amp;gt;{run()}可以简化为demo.onclick=run   </description>
    </item>
    
    <item>
      <title>Webpack入门</title>
      <link>http://example.org/posts/webpack%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 07 Dec 2019 21:33:04 +0800</pubDate>
      
      <guid>http://example.org/posts/webpack%E5%85%A5%E9%97%A8/</guid>
      <description>webpack的作用  转译代码(ES6转为ES5，SCSS转为CSS),可以使得低版本的浏览器也兼容代码 构建build 代码压缩 代码分析  webpack 安装 mkdir webpack-demo cd webpack-demo npm init -y ---创建一个package.json文件 npm install webpack webpack-cli --save-dev HTTP 缓存  浏览器在加载网址时，需要加载对应的css,js等文件，如果设置了响应头的ResponseHeader的Cache-Control:public,max-age=缓存期限，且js或者css的文件名没有改动，则会直接从内存读取，不会重新下载，缩短了加载的时间 index.html的数据不应该缓存，这样可以发现及时发现js 或者css的更新，使得用户获取到最新的页面  webpack 转译JS  npx webpack 配置
const path = require(&amp;#39;path&amp;#39;); module.exports = { mode: &amp;#34;production&amp;#34;,//开发模式 development entry: &amp;#39;./src/index.js&amp;#39;,//入口文件 output: { filename: &amp;#39;main.js&amp;#39;?&amp;#34;index.[contenthash].js&amp;#34;,//出口文件 // 文件名中的hash,为了使得更改内容时自动更新出口JS文件的文件名， //文件名改变时就不再使用缓存，重新下载新文件 }, };   webpack生成HTML文件  安装HtmlWebpackPlugin插件 npm install --save-dev html-webpack-plugin 设置config.js
var HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;); module.</description>
    </item>
    
    <item>
      <title>跨域</title>
      <link>http://example.org/posts/%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Mon, 11 Nov 2019 20:20:55 +0800</pubDate>
      
      <guid>http://example.org/posts/%E8%B7%A8%E5%9F%9F/</guid>
      <description> 同源策略  浏览器故意设计的一个功能限制 如果JS运行在源A里面，就只能获取源A的数据，不能获取源B的数据，即不允许跨域 目的 为保护用户隐私 限制的是数据访问，可以引用，不能读取。我们在引用CSS和JS时，不知道其内部的数据，只是让css或者JS在我们的也页面执行  同源  源： 协议+域名+端口号(不同端口，同一个IP，同一个域名，都可能) 如果两个url的源一致，则这两个url同源  CORS  Cross Origin Resource 方法1：response.setHeader(&amp;lsquo;Access-Control-Allow-Origin&amp;rsquo;,&amp;lsquo;http://frank.com:9999&#39;)
JSONP 浏览器因为某些原因不支持CORS ，必须用另种方式跨域，请求一个JS文件，JS会执行一个回调函数，回调的函数名是可以随机生成的，以callback参数传给后台，后台会把函数再次返回给我们再执行
 优点:支持IE，可以跨域
 缺点:由于是Script标签，无法AJAX那样读取精确的状态，只有成功和失败；只能发GET请求，不接受POST
  </description>
    </item>
    
    <item>
      <title>JQuery入门</title>
      <link>http://example.org/posts/jquery%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 07 Nov 2019 20:21:13 +0800</pubDate>
      
      <guid>http://example.org/posts/jquery%E5%85%A5%E9%97%A8/</guid>
      <description>jQuery获取元素  选择表达式可以是CSS选择器：
$(document) //选择整个文档对象 $(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素 $(&amp;#39;div.myClass&amp;#39;) // 选择class为myClass的div元素 $(&amp;#39;input[name=first]&amp;#39;) // 选择name属性等于first的input元素  也可以是jQuery特有的表达式：
$(&amp;#39;a:first&amp;#39;) //选择网页中第一个a元素 $(&amp;#39;tr:odd&amp;#39;) //选择表格的奇数行 $(&amp;#39;#myForm :input&amp;#39;) // 选择表单中的input元素 $(&amp;#39;div:visible&amp;#39;) //选择可见的div元素 $(&amp;#39;div:gt(2)&amp;#39;) // 选择所有的div元素，除了前三个 $(&amp;#39;div:animated&amp;#39;) // 选择当前处于动画状态的div元素   jQuery取值和赋值  同一个函数，通过判断其参数的个数及类型，实现不同的操作（即重载）的方法来同时实现取值和赋值，常见的取值和赋值函数如下
.html() 取出或设置html内容 .text() 取出或设置text内容 .attr() 取出或设置某个属性的值 .width() 取出或设置某个元素的宽度 .height() 取出或设置某个元素的高度 .val() 取出某个表单元素的值   jQuery 的链式操作  jQuery(选择器)获取元素之后并不将这些元素返回，而是返回一个可以操作这些元素的对象，所以不必多次查找相同的元素，不同操作可以连在一起。jQ 提供了.end()方法，使得结果集可以后退一步：
$(&amp;#34;#p1&amp;#34;) .addClass(&amp;#34;red&amp;#34;) .html(&amp;#34;hello&amp;#34;) .attr(&amp;#34;title&amp;#34;,&amp;#34;head&amp;#34;)   jQuery 如何创建元素  新元素直接传入jQuery的构造函数
$(&amp;#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;#39;); $(&amp;#39;&amp;lt;li class=&amp;#34;new&amp;#34;&amp;gt;new list item&amp;lt;/li&amp;gt;&amp;#39;); $(&amp;#39;ul&amp;#39;).</description>
    </item>
    
    <item>
      <title>ES6常用语法</title>
      <link>http://example.org/posts/es6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 06 Nov 2019 21:32:12 +0800</pubDate>
      
      <guid>http://example.org/posts/es6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>title: &amp;ldquo;ES6语法-解构赋值&amp;rdquo; date: 2019-11-03T11:02:36+08:00
draft: true 解构赋值 解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。  数组
let a,b,c arr=[2,3,5] [a,b,c]=arr//将2,3,5分别赋值给a,b,c  let [bar, foo] = [1] // foo 解构不成功，为undefined  let [x, y] = [1, 2, 3] //不完全解构 x=1,y=2  //将剩余数组赋值给一个变量  let [a, ...b] = [1, 2, 3];// a =1,b=[2,3]  对象
//对象的属性没有次序，变量必须与属性同名，才能取到正确的值。 let { a, b } = { a: &amp;#39;aaa&amp;#39;, b: &amp;#39;bbb&amp;#39; } // 如果变量名与属性名不一致，必须写成下面这样 let obj = { first: &amp;#39;hello&amp;#39;, last: &amp;#39;world&amp;#39; } let { first: f, last: l } = obj; //对象的解构赋值是下面形式的简写 let { foo: foo, bar: bar } = { foo: &amp;#39;aaa&amp;#39;, bar: &amp;#39;bbb&amp;#39; }  字符串</description>
    </item>
    
    <item>
      <title>异步&amp;Promise</title>
      <link>http://example.org/posts/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Sat, 02 Nov 2019 21:40:17 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/</guid>
      <description>同步与异步  同步 能直接拿到结果 异步 不能直接拿到结果，通过轮询或者回调，以下三种经常会用到回调  1.setTimeout 2.AJAX (XMLHttpRequest) ,可以设置成同步 request.open(&amp;lsquo;GET&amp;rsquo;,url,false),但是非常不推荐 3.AddEventListener   异步例子 function 摇骰子(){ setTimeout(()=&amp;gt;{ return parseInt(Math.random()*6+1) },1000) // return undefined  }  获取异步结果 一、一个结果 function 摇骰子(fn){ setTimeout(()=&amp;gt;{ fn(parseInt(Math.random()*6+1)) },1000) } function f1(x){console.log(x)} 摇骰子(f1) //以上可以简化 摇骰子(x=&amp;gt;{console.log(x)}) //再简化 注意只有参数一致才能进行此步简化 摇骰子(console.log) const array =[&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;].map(parseInt) console.log(array)//[1,NAN,NAN] //正确的写法 const array =[&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;].map((item,i,arr)=&amp;gt;{ return parseInt(item) })  二、两个结果  方法一： 回调接受两个参数
fs.readFile(&amp;#39;./1.text&amp;#39;,(error,data)=&amp;gt;{ if(error){console.log(&amp;#39;失败&amp;#39;);return} console.log(data)//成功 })  方法二： 设置两个回调参数
ajax(&amp;#39;GET&amp;#39;,&amp;#39;./1.json&amp;#39;,data=&amp;gt;{},error=&amp;gt;{}) ajax(&amp;#39;GET&amp;#39;,&amp;#39;./1.json&amp;#39;,{ success:()=&amp;gt;{}, failed:()=&amp;gt;{} }  以上两个方法的不足</description>
    </item>
    
    <item>
      <title>算法入门</title>
      <link>http://example.org/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 15 Oct 2019 19:09:05 +0800</pubDate>
      
      <guid>http://example.org/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</guid>
      <description>取两个值中间的最小值  数据结构&amp;mdash;-数组 编程&amp;mdash;-if else Js 内置API Math.min(1,2),Math.min.call(1,2),Math.min.apply(null,[1,2])  Math 是一个对象，但是首字母大写了    初始代码版本
let minOf2 =(numbers) =&amp;gt;{ if (numbers[0]&amp;lt;numbers[1]){ return numbers[0] }else{ return numbers[1] } } 代码优化第一次&amp;mdash;冒号问号表达式
let minOf2 =numbers=&amp;gt; numbers[0]&amp;lt;numbers[1]?numbers[0]:numbers[1]  代码优化第二次&amp;ndash;析构赋值
let minOf2 =[a,b]=&amp;gt;a&amp;lt;b?a:b //调用 小白调用法：minOf2([3,6]) 大神调用法：minOf2.call(null,[1,2])  利用递归实现查找最小值 let min =(numbers)=&amp;gt;{ if(numbers.length&amp;gt;2){ return min( [numbers[0],min(numbers.slice(1))] ) } else{ return Math.min.apply(null,numbers) } } 利用递归实现多个值的数组从小到大排列，即sort函数 sortAll([6,7,8,3,5]) //坑 参数未输入数组，reverse()一直报错 // concat的需要作用在数组上，然后[minNumber] let sortAll = (numbers)=&amp;gt;{ if(numbers.length&amp;gt;2){ let minNumber = min(numbers) let minIndex = numbers.</description>
    </item>
    
    <item>
      <title>JS对象的类</title>
      <link>http://example.org/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB/</link>
      <pubDate>Sat, 21 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB/</guid>
      <description> 构造函数 let obj = New X()  自动创建了一个空对象 自动为空对象关联原型，原型地址指定为X。prototype 自动将空对象作为this关键字运行的构造函数 自动return this  构造函数本身X  X函数负责给对象本身添加属性 X.prototype 对象负责添加新对象的共有属性（X.prototype 存着原型的地址）  如何确定一个对象的原型是什么？  对象.proto===其构造函数.prototype Object.prototype === null,Object 是一个根对象，没有原型  代码规范  构造函数 首字母大写 被构造出的对象首字母小写 构造函数名称一般使用名词，其它函数名称使用动词开头   window 是由Window构造的 window.Object 是 Function 构造的 浏览器构造了Function 并且指定它的构造者就是自己  Class新语法 class Square{ constructor(width){ this.width =width getArea(){return this.width*this.width} } getLength(){return this.width*4} }</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>http://example.org/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 20 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>##JS 对象基本用法
声明对象的方式  let obj ={&#39;name&#39;:&#39;frank&#39;,&#39;age&#39;:18} let obj =new Object({&#39;name&#39;:&#39;frank&#39;,&#39;age&#39;:18}) console.log({&#39;name&#39;:&#39;frank&#39;,&#39;age&#39;:18})&amp;ndash;不声明直接使用  注意  键名是字符串，不是标识符，可以包含任意字符 引号可以省略，省略之后只能写标识符&amp;ndash;键名有空格是不可以省略 就算引号省略了，键名还是字符串 obj[key]:value &amp;mdash;-[]号表示属性名是变量，先求值，再转字符串 除了字符串，Symbol也可以做属性名
奇怪的属性值 所有属性名都会自动变成字符串
let obj ={ 1:&amp;#39;a&amp;#39;, 1e2:true,//会自动计算后再转为字符串 0XXF:false //会自动转化为10进制再转为字符串}  隐藏属性   JS里每个对象都有一个隐藏属性 这个隐藏属性储存着其共有属性组成的对象的地址 这个共有属性组成的对象叫做原型 也就是说隐藏属性储存着原型的地址  对象的增删改查 删  obj.name = undefined &amp;mdash;只删除属性值 delete obj.name &amp;mdash;删除属性名和属性值 delete obj[&amp;lsquo;name&amp;rsquo;] &amp;mdash;删除属性名和属性值 &amp;lsquo;name&amp;rsquo; in obj &amp;mdash; 检查obj是否含有属性名 &amp;lsquo;name&amp;rsquo; in obj &amp;amp;&amp;amp; obj.xxx ===undefined &amp;mdash;有属性名，但是没有值  查  读取对象自身所有的属性 Object.keys(obj) 读取对象的属性值 Object.</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://example.org/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Thu, 19 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description> 1.函数需要经过调用后才能执行 2.函数内涉及到的变量，需要确定调用前变量的数值，不一定是初始值，如果调用后更改变量值也不会影响到函数的返回值 3. 如果函数内部涉及到了setTimeout(()=&amp;gt;{},0),需要先执行for 循环，然后再执行setTimeout 4.for循环 &amp;amp; setTimeout 一起使用时的机制 let i=0 for(i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{console.log(i)},0) }//打印出6个6 //因为setTimeout()内的函数会在for循环结束之后再执行，且每次循环都会有一个setTimeOut() //所以i=6时，循环结束，一起打印出6个6。for(let i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{console.log(i)},0) }//打印出0-5,因为JS在for 和let 一起用的时候每次循环会创建一个i//打印 0-5的其它方法 let i=0; while (i&amp;lt;6) { console.log(i) i++ }</description>
    </item>
    
    <item>
      <title>JS运算符</title>
      <link>http://example.org/posts/js%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 18 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/js%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>一、算术运算符 Number 运算  加减乘除 余数 %  JS中-1%7是错误的先计算1%7然后再变成负数，得出-1  指数** 自增自减 a++ / ++a / a&amp;ndash; / -aa （尽量少用）  a++表达式的值是a,++a的表达式的值是a+1 a&amp;ndash;表达式的值是a,&amp;ndash;a的表达式的值是a-1  求值运算符号 +a 不是取正值 负数运算符 -a  String 运算  连接运算符 + &amp;lsquo;12&amp;rsquo;+&amp;lsquo;45&amp;rsquo; =&amp;lsquo;1245&amp;rsquo;  只支持+法运算，其它运算不支持 如果加号中运算中有非字符串，则转换为字符串，再相加,如果字符串-数字，则字符串转为数字，再相减（不同类型不要运算）   二、比较运算符  &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= ==
 模糊相等,经常会自动进行类型转换(不推荐使用) 0==[],0==&amp;lsquo;0&amp;rsquo;,0==&amp;rsquo;\t&amp;rsquo; tab字符 , 但是[]!=&amp;lsquo;0&amp;rsquo;!=&amp;rsquo;\t&amp;rsquo;
// 自相矛盾 var a =[] if(a){console.log(&amp;#39;a&amp;#39;)} else{console.log(&amp;#39;a不等于true&amp;#39;)}//a var a =[] if(a==true){console.log(&amp;#39;a&amp;#39;)} else{console.log(&amp;#39;a不等于true&amp;#39;)}//a不等于true  !=</description>
    </item>
    
    <item>
      <title>JS数据类型</title>
      <link>http://example.org/posts/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 16 Sep 2019 19:36:33 +0800</pubDate>
      
      <guid>http://example.org/posts/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>数字 与 字符串  数字与字符串的区别
 数字是数字，字符串是字符串，要严谨 数字可以加减乘除，字符串不可以 字符串能用来表示电话号码，数字不行 JS中数字是用64位浮点数形式储存的，字符串是用类似UTF8形式储存的(UCS2)  编码方式
 48-57表示 1-9 数字 65-90 表示 A-Z 97-122 表示 a-z  编码发展
 国标局 GB2312 0000-FFFF 16位 ，两个字节，无法表示生僻字，日韩文 微软出了 GBK 国标扩 国标局 GB18030 不兼容GBK 万国码 Unicode 收录13万多字符，全世界通用 ，三个字节以上 UTF-8 最少可用8位存一个字符   布尔值 boolean false true  得到布尔值的三个方法  否定运算 !value 相等运算 == != === !== 比较运算 &amp;gt; &amp;gt;= &amp;lt; &amp;lt;=  5个falsy值 :相当于false 但是又不是false . null undefined 0 NaN &amp;ldquo;  数字number  写法：整数 小数 科学计数 八进制 十六进制 二进制 特殊值:  +0 0 -0 1&amp;frasl;0 =infinity 1/+0 =infinity 1/-0 =-infinity infinity +infinity -infinity NaN 0/0=NaN not a number 是一个数字 NaN==NaN is false  64位浮点数  符号占一位 (正0，负1) 指数占11位(-1023-1024) 有效数字占 52位(开头的1省略)</description>
    </item>
    
    <item>
      <title>Javascript入门</title>
      <link>http://example.org/posts/javascript%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 09 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/javascript%E5%85%A5%E9%97%A8/</guid>
      <description>1.表达式 1 + 3叫做表达式（expression），指一个为了得到返回值的计算式
2.语句 语句（statement）是为了完成某种任务而进行的操作，例如一行赋值语句。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。
3.大小写敏感 4.空格 没有实际意义，不影响断句即可 5.回车 大部分没有意义，但是return 后面不可以加回车，否则会返回undefined 6.标识符  第一个字母：Unicode 编码字母，$ 或 _ 或中文 第二个字母：上面所有内容和数字  7.注释 : // &amp;mdash;&amp;mdash;单行注释 ； /* */ &amp;mdash;&amp;mdash;多行注释  踩坑注释 为什么代码会写得这么奇怪，遇到了什么bug  8.区块 block 被大括号包裹的多行代码{ }通常与if,for,while联合使用 9.if语句 &amp;mdash;&amp;mdash; if (表达式){语句1}else{语句2}  { } 在语句只有一句时可以省略，但是不推荐，无{ }的只执行到第一句代码结束(逗号隔开的也为一个语句) if 表达式可以为(a=1)，但是这样会改变a的值。判断建议使用(a===1) 语句1 和语句2 都可以嵌套
//语句1嵌套，并且省略了{ } var a=9 if (a&amp;lt;100&amp;gt;) if (1&amp;lt;10&amp;gt;) console.log(&amp;#39;a&amp;lt;10&amp;#39;) 成立 //语句2 嵌套 if(a&amp;gt;100){ }else{ if (a&amp;lt;10&amp;gt;){ console.log(&amp;#39;a&amp;lt;10&amp;#39;) } } //语句2 嵌套省略{ } if(a&amp;gt;100){ }else if (a&amp;lt;10&amp;gt;){ console.</description>
    </item>
    
    <item>
      <title>Javascript历史</title>
      <link>http://example.org/posts/javascript%E5%8E%86%E5%8F%B2/</link>
      <pubDate>Mon, 09 Sep 2019 21:26:03 +0800</pubDate>
      
      <guid>http://example.org/posts/javascript%E5%8E%86%E5%8F%B2/</guid>
      <description>1994年，一家名为Mosaic Netscape 发布，四个月内发展成为1990年代互联网的主要浏览器，同年更名为Netscape Navigator(网景),1995招募了布兰登·艾克，决定发明一种与Java搭配使用的辅助脚本语言并且语法上有些类似，艾克仅花了十天时间设计了原型。最初命名为Mocha，然后改名为LiveScript，后为了跟随Java的热潮 更改JavaScript。
浏览器之争 JavaScript推出后在浏览器上大获成功，1996年 6月 IE3浏览器推出了JScript， 和JS处于同台竞争，这两个JavaScript语言版本在浏览器端共存意味着语言标准化的缺失，96年11月，网景正式向ECMA（欧洲计算机制造商协会）提交语言标准，随后便制定了ECMAScript标准规范。 微软继续发出反击，在Windows 系统中捆绑了IE浏览器，市场份额很快超过了网景，网景节节败退，并将浏览器开源，但是并没有太大作用，不久就被收购。随后IE浏览器便一家独大，发展到了2001年 Windows Xp IE6一同发布 到2004年全球的市场占有率高达80%以上，但是由于不兼容W3c标准，为大多数开发者所诟病。Firefox 准备涅槃重生，2006成为了主流的浏览器，但是市场份额仍然不敌IE6。2004年谷歌抓住机会，着手研发浏览器，2008年正式发布，到2016年全球份额超过62%，取得了巨大的成功。后期随着移动市场的兴起，手机上不在支持IE，2018年12月6日，微软正式宣布桌面版Edge浏览器将采用Chromium内核，并将支持所有受支持的Windows版本以及macOS等平台， 随着智能手机的发布
ECMAScript 标准历史 1997年7月6日 第一版 ECMAScript发布，1999年12月第三版发布（使用最为广泛的版本），第四版流产，2009年12月 第五版， 2015年6月 第六版发布
Javascript的兴起 2004年谷歌发布在线Gmail,这使得开发者和用户眼前一亮，2005年谷歌Gmail 运用到的技术被命名为AJAX，前端技术真正出现
Javascript的爆发 Chrome 的 V8 引擎极大的提升了 JS 代码的运行效率。直接导致了 Node.js / npm 等基础的出生，前端工程化成为可能。之后 Express 出现，JS 开发者可以开始愉快进行后端开发。再之后大量新技术蓬勃发展。</description>
    </item>
    
    <item>
      <title>HTTP入门</title>
      <link>http://example.org/posts/http%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 30 Aug 2019 21:29:47 +0800</pubDate>
      
      <guid>http://example.org/posts/http%E5%85%A5%E9%97%A8/</guid>
      <description>一、IP Internet Protocol 网际协议 1. 两个作用：  如何定位设备 封装数据报文，以跟其他设备交流  2. 内网&amp;amp;外网  内网和外网通过路由器连接 内网的设备可以互相访问，但是不能访问外网 内网和外网是两个隔绝的空间，只有通过路由器才能互通 外网的设备可以相互访问但是无法访问你的内网  3. 特殊的Ip  127.0.01 表示自己 localhost 也表示自己 区别是可以通过C盘hosts文件更改 0.0.0.0 不表示任何设备  4. port 端口 总计 共有65535个端口  HTTP : 80端口 HTTPS : 443 端口 FTP : 21 端口  5. IP和域名的对应关系  一个域名可以对应不同的端口 &amp;mdash;&amp;ndash;负载均衡 一个IP可以对应不同的域名 &amp;mdash;&amp;mdash;共享主机  6.域名  域名是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个IP地址的代称，目的是为了便于记忆后者 DNS(Domain Name System): 连接域名和IP
 浏览器向DNS服务器询问xiedaimala.com对应的IP DNS 回复一个IP 浏览器再向对应的IP端口，80/443发送请求 请求内容是查看 xiedaimala.com的首页  域名层次 ：域名名由一或多个部分组成，这些部分通常连接在一起，并由点分隔，一个域名的层次结构，从右侧到左侧隔一个点依次下降一层。</description>
    </item>
    
    <item>
      <title>CSS动画</title>
      <link>http://example.org/posts/css%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 26 Aug 2019 16:40:05 +0800</pubDate>
      
      <guid>http://example.org/posts/css%E5%8A%A8%E7%94%BB/</guid>
      <description>1.浏览器渲染过程  根据HTML构建 DOM 树 根据 CSS 构建 CSSOM 树 将 DOM 与 CSSOM 合并成一个渲染树 根据渲染树布局Layout(文档流、盒模型、节点的大小及位置) Painting 将各个节点绘制到屏幕上（边框颜色、文字颜色、阴影等） Composite 根据层叠关系展示页面  2.JS更新样式的三种方式  1-6 过程全部重新走一遍&amp;mdash;-移动节点(div.remove()) 跳过Layout 布局&amp;mdash;-更改背景颜色 跳过 Layout 布局和 Painting 绘制&amp;mdash;-改变transform  每个属性触发什么流程，可以参考 https://csstriggers.com/ 3.CSS动画优化  坚持使用 transform 和 opacity 属性更改来实现动画,除此之外更改任何属性始终都会触发绘制，绘制通常是像素管道中开销最大的部分；应尽可能避免绘制，通过层的提升和动画的编排来减少绘制区域 使用 will-change 或 translateZ 提升移动的元素 避免过度使用提升规则；各层都需要内存和管理开销 避免使用 setTimeout 或 setInterval，请使用 requestAnimationFrame  4.transform  移动 translate(x,y)，translateX|Y|Z(x) ,translate3d(x,y,z) &amp;mdash;-x值可以为100px或者50% 旋转 rotate(angle)， rotateX|Y|Z(angle)， rotate3d(x,y,z,angle)&amp;mdash;-90deg,0.25turn,1.57rad 缩放 scale(x,y),scale3d(x,y,z),scaleX|Y|Z(x) 倾斜 skew(x-angle,y-angle),skewX|Y(angle)  注：  inline 元素不支持 transform，需要先转为block 3D 转换 父容器需要设置 perspective(n) translate(-50%,-50%)，可以做绝对定位元素的居中 transform:scale(1.</description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>http://example.org/posts/css%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 25 Aug 2019 12:57:09 +0800</pubDate>
      
      <guid>http://example.org/posts/css%E5%B8%83%E5%B1%80/</guid>
      <description>兼容性 gird 布局&amp;gt;flex 布局&amp;gt; float布局 固定宽度布局 不固定宽度布局 float布局(专门为IE定制的布局)  子元素：float:left 和width(最后一个子元素可以不设置宽度会根据内容自动，可以加一个max-width) 父元素：.clearfix::after{ content:&amp;ldquo;; display:inline-block; clear:both; } IE 6 &amp;amp; 7存在双倍margin bug 解决方法:
margin-left:10px;_margin-left:5px;
或者设置：display：block；
响应式布局  flex 布局  container  display:flex | inline-flex; flex-direction:row |column |row-reverse |column-reverse; flex-wrap:nowrap|wrap; justify-content:flex-start|flex-end|center|space-between|space-around|space-evenly; 主轴对齐方式 align-items:stretch|flex-start|flex-end|center; 次轴对齐方式 align-content:stretch|flex-start|flex-end|center|space-between|space-around 主轴多行对齐方式     items  order:num; item的显示顺序按照order从小到大显示，默认为0 flex-grow:num ; 每个item占据的空间，数字越大，空间越大 flex-shrink: num 空间不够时，数字越大，缩小的程度越大，为0时表示不会被缩小 align-self: stretch|flex-start|flex-end|center *单个item的对齐方式 *   gird 布局 小技巧 img 标签 添加背景颜色后有多余的东西，可以用vertical-align:top/middle</description>
    </item>
    
    <item>
      <title>命令行</title>
      <link>http://example.org/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Tue, 20 Aug 2019 22:29:46 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>查  pwd &amp;mdash;-查看当前目录的绝对内容 ls &amp;mdash;-查看当前目录内容 ls 路径 &amp;mdash;-查看指定目录的内容 查看文件内容  cat 路径 head 路径 tail 路径 less 路径   增  创建 1.txt  touch 1.txt echo hi &amp;gt; 1.txt echo hihi &amp;gt;&amp;gt; 1.txt echo -2 &amp;ldquo;1\n2&amp;rdquo; &amp;gt; 1.txt  创建目录
 mkdir a mkdir -p a/b/c  同时创建多个文件
 touch 1.txt 2.txt  同时创建多个目录
 mkdir -p a/b/b a/d/c  复制文件
 cp 1.txt 2.txt  复制目录</description>
    </item>
    
    <item>
      <title>hugo个人博客搭建</title>
      <link>http://example.org/posts/hugo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 18 Aug 2019 15:56:52 +0800</pubDate>
      
      <guid>http://example.org/posts/hugo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>安装Hugo 创建目录：id.github.io-creator hugo new site id.github.io-creator 设置主题
$ cd id.github.io-creator $ git init $ git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke $ echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 添加第一篇博文
$ hugo new posts/my-first-post.md $ hugo server -D 创建静态页面
 在当前目录创建了一个public文件夹,新建 .gitignore文并,内容填写public， 并将public单独创建创建本地仓库并且上传github
$ hugo $ cd public $ git init $ git add . $ git commit -m &amp;#34;开博啦&amp;#34; $ github页面新建仓库 命名为 id.github.io $ git remote add origin ssh $ git push -u origin master  github设置 :setting &amp;ndash;GitHub Pages &amp;mdash;master branch ,后面显示的地址则是博客的静态地址</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://example.org/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 16 Aug 2019 18:56:52 +0800</pubDate>
      
      <guid>http://example.org/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>一、 a标签 1. href 属性  网页链接:有三种方式 1.https://www.baidu.com/ 2. https//www.baidu.com/ 3. baidu.com 路径:绝对路径（httpserver所在目录为根目录），如果是双击打开的网页则是计算机根目录相对路径 伪协议：  javascript:+代码+;点击后触发执行js代码, 如果此处代码为空，会则不做任何操作。href=&amp;ldquo;#&amp;ldquo;时会跳转到页面顶部，herf=&amp;rdquo;&amp;ldquo;时会刷新页面 href=&amp;ldquo;#xxx&amp;rdquo; xxx表示id,跳转到当前页面id为xxx的地方 href=&amp;ldquo;mailto:xxx@email.com&amp;rdquo; href=&amp;ldquo;tel:188xxxxx&amp;rdquo;   2. target 指定打开新连接页面的窗口  _self 当前页面打开 _blank 新建窗口打开 _top 最外层打开页面，针对html框架iframe网页 parent 父级打开网页，针对html框架iframe网页中，整个网页将重新载入打开目标网址地址 xxx 在一个自定义窗口打开页面  3. download 点击下载页面,一般不用 4. rel = noopener 二、 table 表格标签 1.table标签： table, thead, tbody, tr (table row), th( table head),td(table data)
2. table CSS样式:  表格宽度table-layout:fixed,auto 边框合并,border-collapse :collapse 文字对齐: text-align, vertical-align 表格内边距:th &amp;amp; td padding   三、 img图片标签  常用属性：height width src alt</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://example.org/posts/html%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 15 Aug 2019 18:56:52 +0800</pubDate>
      
      <guid>http://example.org/posts/html%E5%85%A5%E9%97%A8/</guid>
      <description> 一、HTML简介 全称为 HyperText Markup Language 是一种超文本标记语言，最初由Tim Berners-Lee 发明，现在已经更新到HTML5
二、Html 起手式 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--声明文档类型--&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;!--声明语言，中文zh-cn--&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;!--可以用于世界上所有语言编码--&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 三、HTML章节标签  标题标签: h1-h6 章节标签: section 文章标签: article 段落标签: p 旁支标签: aside 头部标签: header 主要内容: main 脚部标签: footer 其它: div  四、标签的全局属性  id HTML元素的唯一的 id ,但是如果出现两个，也不会报错，如果id=&amp;lsquo;xxx&amp;rsquo;,js可以通过 直接调用，如果id名同window的全局属性则不可调用 class contenteditable 为true时表示用户可以编辑该内容 hidden style 优先级: Js样式 &amp;gt; 内联样式 &amp;gt; css 样式 tabindex 通过鼠标tab健访问网页时的顺序，可以不按照顺序，为0时表示最后一个，为-1时表示不会被访问到 title 鼠标移到元素上时显示一段文本  五、内容标签  ol + li &amp;mdash;-orderlist item ul + li &amp;mdash;-unorderlist item dl + dt + dd &amp;mdash;-descriptionlist pre html一般情况下多个空格，tab健，回车均显示一个空格，如果想要全部显示则可加上这个标签 hr 分割线 code 编码等宽字体 hr分割线 br 换行 em 强调内容 strong 重要内容 内联引用 quote 块级引用blockquote a 超链接 属性有 href target  </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Wed, 14 Aug 2019 18:56:52 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description> hello 大家好，这里是小郭同学~ 我的目标：通过这个课程达到初级前端的程度，找到一份合适的工作。 我的兴趣爱好是:  听音乐 看电影 羽毛球 游泳（学习ing&amp;hellip;）
我的日常： 上班
 学习
  这里是一些代码的演示HTML CSS Javascript
Html &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; Css *{ margin:0 padding:0 } Javascript console.log(&amp;#34;看这里&amp;#34;) </description>
    </item>
    
  </channel>
</rss>